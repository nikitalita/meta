

std::unordered_map<std::string, std::pair<test::test_class::func_type, std::vector<int>>> test::test_class::attr_func_map;
std::unordered_map<std::string, std::pair<test::test_class::const_func_type, std::vector<int>>> test::test_class::attr_const_func_map;
void test::test_class::init_attr_func_map()
{
    auto cur_type_map = meta::utils::type_map<std::string>();
    auto interface_1_arg_require = meta::utils::func_arg_type_ids<std::string, meta::utils::function_arguments<decltype(&test_class::interface_1)>::type>::result();
    attr_func_map["interface_1"] = std::make_pair(&test_class::attr_func_for_interface_1, interface_1_arg_require);
    auto interface_2_arg_require = meta::utils::func_arg_type_ids<std::string, meta::utils::function_arguments<decltype(&test_class::interface_2)>::type>::result();
    attr_const_func_map["interface_2"] = std::make_pair(&test_class::attr_func_for_interface_2, interface_2_arg_require);
    auto interface_3_arg_require = meta::utils::func_arg_type_ids<std::string, meta::utils::function_arguments<decltype(&test_class::interface_3)>::type>::result();
    attr_func_map["interface_3"] = std::make_pair(&test_class::attr_func_for_interface_3, interface_3_arg_require);

    
}

void test::test_class::attr_func_for_interface_1(const std::vector<void*>& data)
{
    auto p_a = reinterpret_cast<std::remove_reference_t<int>*>(data[0]);
    auto p_b = reinterpret_cast<std::remove_reference_t<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>*>(data[1]);
    interface_1(*p_a,*p_b);
}
void test::test_class::attr_func_for_interface_2(const std::vector<void*>& data) const 
{
	
    interface_2();
}
void test::test_class::attr_func_for_interface_3(const std::vector<void*>& data)
{
    auto p_s = reinterpret_cast<std::remove_reference_t<const std::basic_string<char>&>*>(data[0]);
    interface_3(*p_s);
}

bool test::test_class::has_attr_func(const std::string& func_name)
{
    auto cur_iter = attr_const_func_map.find(func_name);
    if(cur_iter == attr_const_func_map.end())
    {
        auto cur_mut_iter = attr_func_map.find(func_name);
        return cur_mut_iter == attr_func_map.end();
    }
    else
    {
        return true;
    }
}
bool test::test_class::has_attr_func_const(const std::string& func_name)
{
    auto cur_iter = attr_const_func_map.find(func_name);
    if(cur_iter == attr_const_func_map.end())
    {
        return false;
    }
    else
    {
        return true;
    }
}



std::unordered_map<std::string, std::pair<int, int>> test::test_class::attr_var_map;
void test::test_class::init_attr_var_map()
{
	auto cur_type_map = meta::utils::type_map<std::string>();

	attr_var_map["a"] = std::make_pair(0, cur_type_map.template get_type_id<decltype(test_class::a)>());

	attr_var_map["b"] = std::make_pair(1, cur_type_map.template get_type_id<decltype(test_class::b)>());

	attr_var_map["c"] = std::make_pair(2, cur_type_map.template get_type_id<decltype(test_class::c)>());

	attr_var_map["d"] = std::make_pair(3, cur_type_map.template get_type_id<decltype(test_class::d)>());
}

bool test::test_class::has_attr_var(const std::string& var_name)
{
	auto cur_iter = attr_var_map.find(var_name);
	if(cur_iter == attr_var_map.end())
	{
		return false;
	}
	else
	{
		return true;
	}
}

std::pair<void*, int> test::test_class::var_address_for_name(const std::string& var_name) const
{
	auto cur_iter = attr_var_map.find(var_name);
	if (cur_iter == attr_var_map.end())
	{
		return std::make_pair(nullptr, 0);
	}
	auto cur_type_idx = cur_iter->second.second;
	auto cur_var_idx = cur_iter->second.first;

	switch (cur_var_idx)
	{
	case 0:
	{
		void* p = const_cast<void*>(reinterpret_cast<const void*>(&a));
		return std::make_pair(p, cur_type_idx);
	}
	case 1:
	{
		void* p = const_cast<void*>(reinterpret_cast<const void*>(&b));
		return std::make_pair(p, cur_type_idx);
	}
	case 2:
	{
		void* p = const_cast<void*>(reinterpret_cast<const void*>(&c));
		return std::make_pair(p, cur_type_idx);
	}
	case 3:
	{
		void* p = const_cast<void*>(reinterpret_cast<const void*>(&d));
		return std::make_pair(p, cur_type_idx);
	}
	default:
		return std::make_pair(nullptr, 0);
	}
}
void test::test_class::register_types()
{
    auto cur_type_map = meta::utils::type_map<std::string>();
    cur_type_map.template register_base_type<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>("std::basic_string<char,std::char_traits<char>,std::allocator<char>>");
    cur_type_map.template register_base_type<test::test_class>("test::test_class");
    cur_type_map.template register_base_type<int>("int");
    cur_type_map.template register_base_type<std::basic_string<char>>("std::basic_string<char>");
}// this file should be end of generated cpp file
test::test_class::static_constructor_for_test_class test::test_class::_static_constructor_;
test::test_class::static_constructor_for_test_class::static_constructor_for_test_class()
{
	init_attr_func_map();
	init_attr_var_map();
	register_types();
}